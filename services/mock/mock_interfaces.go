// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=mock_services -destination=./mock/mock_interfaces.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	services "github.com/jackchuka/gh-oss-watch/services"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
	isgomock struct{}
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetConfigPath mocks base method.
func (m *MockConfigService) GetConfigPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigPath indicates an expected call of GetConfigPath.
func (mr *MockConfigServiceMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockConfigService)(nil).GetConfigPath))
}

// Load mocks base method.
func (m *MockConfigService) Load() (*services.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*services.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockConfigServiceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigService)(nil).Load))
}

// Save mocks base method.
func (m *MockConfigService) Save(config *services.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigServiceMockRecorder) Save(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigService)(nil).Save), config)
}

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
	isgomock struct{}
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockCacheService) Load() (*services.CacheData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*services.CacheData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCacheServiceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCacheService)(nil).Load))
}

// Save mocks base method.
func (m *MockCacheService) Save(cache *services.CacheData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", cache)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCacheServiceMockRecorder) Save(cache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCacheService)(nil).Save), cache)
}

// MockGitHubService is a mock of GitHubService interface.
type MockGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceMockRecorder
	isgomock struct{}
}

// MockGitHubServiceMockRecorder is the mock recorder for MockGitHubService.
type MockGitHubServiceMockRecorder struct {
	mock *MockGitHubService
}

// NewMockGitHubService creates a new mock instance.
func NewMockGitHubService(ctrl *gomock.Controller) *MockGitHubService {
	mock := &MockGitHubService{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubService) EXPECT() *MockGitHubServiceMockRecorder {
	return m.recorder
}

// GetCurrentUser mocks base method.
func (m *MockGitHubService) GetCurrentUser() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockGitHubServiceMockRecorder) GetCurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockGitHubService)(nil).GetCurrentUser))
}

// GetRepoStats mocks base method.
func (m *MockGitHubService) GetRepoStats(owner, repo string) (*services.RepoStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoStats", owner, repo)
	ret0, _ := ret[0].(*services.RepoStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoStats indicates an expected call of GetRepoStats.
func (mr *MockGitHubServiceMockRecorder) GetRepoStats(owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoStats", reflect.TypeOf((*MockGitHubService)(nil).GetRepoStats), owner, repo)
}

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
	isgomock struct{}
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockOutput) Printf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockOutputMockRecorder) Printf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockOutput)(nil).Printf), varargs...)
}

// Println mocks base method.
func (m *MockOutput) Println(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Println", varargs...)
}

// Println indicates an expected call of Println.
func (mr *MockOutputMockRecorder) Println(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockOutput)(nil).Println), args...)
}
